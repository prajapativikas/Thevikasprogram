/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slproject;

import au.com.bytecode.opencsv.CSVWriter;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nimbus
 */
public class alot_search extends javax.swing.JFrame {

    /**
     * Creates new form allot_search
     */
    public alot_search() {
        initComponents();

        try {
            Image i = ImageIO.read(getClass().getResource("sls_logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setTitle(Config.PRODUCTTITLE + "_" + Config.VERSION + " - Alloted Products List (Current User : " + Config.currentUserFullName + ")");
        show_table();
        fillProductNameCombo();
        fillProductIDCombo();
        fillAllotedToCombo();

        tblAllotedProductsList.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void show_table() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select i.inv_name, concat(a.id_code,a.id_no) as id, a.alloted_date, a.unalloted_date, "
                    + "concat(u.user_f_name, \" \", u.user_l_name) as requested_by, "
                    + "concat(um.user_f_name, \" \", um.user_l_name) as alloted_to, a.comment "
                    + "from allot_table as a "
                    + "left join inventory_master as i "
                    + "on a.id_code = i.inv_code "
                    + "left join user_master as u "
                    + "on a.requested_by = u.emp_code "
                    + "left join user_master as um "
                    + "on a.allot_to = um.emp_code;";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String name = rs.getString("inv_name");
                String id = rs.getString("id");
                String allotedDate = rs.getString("alloted_date");
                String unallotedDate = rs.getString("unalloted_date");
                String requestedBy = rs.getString("requested_by");
                String allotedTo = rs.getString("alloted_to");
                String comment = rs.getString("comment");

                DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
                model.addRow(new Object[]{name, id, allotedDate, unallotedDate, requestedBy, allotedTo, comment});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    public void fillProductNameCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select distinct i.inv_name from allot_table as a "
                    + "left join inventory_master as i "
                    + "on a.id_code = i.inv_code";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String name = rs.getString("inv_name");
                cbProductName.addItem(name);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    /**
     *
     */
    public void fillProductIDCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select distinct concat(id_code, id_no) as id from allot_table";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            System.out.println(cbProductId.getSelectedItem());
            while (rs.next()) {
                String id = rs.getString("id");
                cbProductId.addItem(id);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.getMessage();
        }
    }

    public void fillAllotedToCombo() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select distinct concat(um.user_f_name, \" \", um.user_l_name) as alloted_to "
                    + "from allot_table as a "
                    + "left join user_master as um "
                    + "on a.allot_to = um.emp_code";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String id = rs.getString("alloted_to");
                cbAllotedTo.addItem(id);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.getMessage();
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbProductName = new javax.swing.JComboBox();
        lblProductName = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllotedProductsList = new javax.swing.JTable();
        btnClear = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        cbProductId = new javax.swing.JComboBox<String>();
        lblProductId = new javax.swing.JLabel();
        lblAlloted = new javax.swing.JLabel();
        cbAllotedTo = new javax.swing.JComboBox();
        lblCountRecord = new javax.swing.JLabel();
        lblAllotment = new javax.swing.JLabel();
        cbAllotment = new javax.swing.JComboBox<String>();
        btnExportData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alloted Products List");
        setResizable(false);

        cbProductName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbProductName.setToolTipText("Select product name");
        cbProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProductNameActionPerformed(evt);
            }
        });

        lblProductName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblProductName.setText("Product Name");

        btnView.setText("View");
        btnView.setToolTipText("Click to view alloted data");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        tblAllotedProductsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "ID", "Alloted Date", "Unalloted Date", "Requested By", "Alloted To", "Comment"
            }
        ));
        tblAllotedProductsList.setEnabled(false);
        jScrollPane1.setViewportView(tblAllotedProductsList);

        btnClear.setText("Clear");
        btnClear.setToolTipText("Click to clear filters");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnHome.setText("Home");
        btnHome.setToolTipText("Click to go to home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        cbProductId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbProductId.setToolTipText("Select product id");
        cbProductId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProductIdActionPerformed(evt);
            }
        });

        lblProductId.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblProductId.setText("Product ID");

        lblAlloted.setText("Alloted To");

        cbAllotedTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbAllotedTo.setToolTipText("Select alloted to");

        lblAllotment.setText("Allotment");

        cbAllotment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Currently Alloted", "Currently Un-Alloted" }));
        cbAllotment.setToolTipText("Select allotment");

        btnExportData.setText("Export Data");
        btnExportData.setToolTipText("Click to export product list");
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnHome)
                                .addGap(18, 18, 18)
                                .addComponent(btnView)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnExportData))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblProductId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCountRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(lblAlloted)
                                .addGap(18, 18, 18)
                                .addComponent(cbAllotedTo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblAllotment, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbAllotment, 0, 136, Short.MAX_VALUE)))))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblProductName)
                        .addComponent(lblProductId)
                        .addComponent(lblAlloted)
                        .addComponent(cbAllotedTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAllotment, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbAllotment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnHome)
                    .addComponent(btnView)
                    .addComponent(lblCountRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        btnView.getAccessibleContext().setAccessibleDescription("");
        btnClear.getAccessibleContext().setAccessibleDescription("");
        btnHome.getAccessibleContext().setAccessibleDescription("");
        btnExportData.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            if (model.getRowCount() > 0) {
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(0);
                }
            }

//             String sql = "select * from allot_table where name = '"+jComboBox1.getSelectedItem().toString()+"' and p_type = '"+jComboBox2.getSelectedItem().toString()+"'";
            String sql = "select i.inv_name, concat(a.id_code,a.id_no) as id, a.alloted_date, a.unalloted_date, "
                    + "concat(u.user_f_name, \" \", u.user_l_name) as requested_by, "
                    + "concat(um.user_f_name, \" \", um.user_l_name) as alloted_to, a.comment "
                    + "from allot_table as a "
                    + "left join inventory_master as i "
                    + "on a.id_code = i.inv_code "
                    + "left join user_master as u "
                    + "on a.requested_by = u.emp_code "
                    + "left join user_master as um "
                    + "on a.allot_to = um.emp_code";
            if (cbProductName.getSelectedItem() != null && !cbProductName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbProductId.getSelectedItem() != null && !cbProductId.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
                }
            }

//              if (cbProductId.getSelectedItem() != null && cbProductId.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
//                if (sql.toLowerCase().contains("where")) {
//                    sql += " and concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
//                } else {
//                    sql += " where concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
//                }
//            }
            if (cbAllotedTo.getSelectedItem() != null && !cbAllotedTo.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(um.user_f_name, \" \", um.user_l_name) = '" + cbAllotedTo.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(um.user_f_name, \" \", um.user_l_name) = '" + cbAllotedTo.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbAllotment.getSelectedItem() != null && !cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("currently alloted")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and a.unalloted_date is null";
                    } else {
                        sql += " where a.unalloted_date is null";
                    }
                } else if (cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("currently un-alloted")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and a.unalloted_date is not null";
                    } else {
                        sql += " where a.unalloted_date is not null";
                    }
                }
            }

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String name = rs.getString("inv_name");
                String id = rs.getString("id");
                String allotedDate = rs.getString("alloted_date");
                String unallotedDate = rs.getString("unalloted_date");
                String requestedBy = rs.getString("requested_by");
                String allotedTo = rs.getString("alloted_to");
                String comment = rs.getString("comment");

                model.addRow(new Object[]{name, id, allotedDate, unallotedDate, requestedBy, allotedTo, comment});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(0);
            }
        }

        cbProductName.setSelectedIndex(0);
        cbProductId.setSelectedIndex(0);
        cbAllotedTo.setSelectedIndex(0);

        show_table();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        start_page start = new start_page();
        start.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void cbProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProductNameActionPerformed
        // TODO add your handling code here:
        try {
            // clearFields(false);
            System.out.println(cbProductName.getSelectedItem());
            if (cbProductName.getSelectedItem() != null) {
//           if (cbProductName.getSelectedItem() != null && !cbProductName.getSelectedItem().toString().trim().equalsIgnoreCase("all") ) {
                fetchProductIds(cbProductName.getSelectedItem().toString().trim());
            }

            String prName = cbProductName.getSelectedItem().toString();

            Class.forName("com.mysql.jdbc.Driver");
            String sql;
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            sql = "SELECT distinct concat(a.id_code,a.id_no) as id FROM allot_table as a left join inventory_master as i on a.id_code = i.inv_code where i.inv_name='" + prName + "'";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

//                String inv_name = rs.getString("inv_name");
//                jComboBox1.addItem(inv_name);
                String ID = rs.getString("id");

            }
        } catch (Exception e) {
        }
    }

    private void fetchProductIds(String product_name) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String id = "";

            if (product_name.toString().equalsIgnoreCase("All")) {

                cbProductId.removeAllItems();
                cbProductId.addItem("All");
                fillProductIDCombo();

            } else {

                id = "select distinct concat(a.id_code,a.id_no) as id FROM allot_table as a left join inventory_master as i on a.id_code = i.inv_code where i.inv_name = '" + product_name.trim() + "' ";
                PreparedStatement ps = con.prepareStatement(id);
                ResultSet rs = ps.executeQuery();

                cbProductId.removeAllItems();
                cbProductId.addItem("All");
                while (rs.next()) {
                    String ID = rs.getString("id");
                    cbProductId.addItem(ID);

                }
            }
            //  System.out.println("product_name" + product_name);

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("[fetch_data] Problem : " + e.getMessage());
        }

    }//GEN-LAST:event_cbProductNameActionPerformed

    private void cbProductIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProductIdActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbProductIdActionPerformed

    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        try {
            File selectedFile = null;
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("CSV", "csv"));
            int returnVal = fileDialog.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileDialog.getSelectedFile();
                System.out.println("selected file is" + selectedFile);

                if (selectedFile.getAbsolutePath().contains(".")) {
                    if (selectedFile.getAbsolutePath().endsWith(".csv")) {
                        exportCSV(selectedFile);
                    } else {
                        JOptionPane.showMessageDialog(this, "You can export CSV file only","CSV only",JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    selectedFile = new File(selectedFile.getAbsolutePath() + ".csv");
                    exportCSV(selectedFile);
                }
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportDataActionPerformed

    private void exportCSV(File selectedFile) {
        try {
            DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
//            if (model.getRowCount() > 0) {
//                for (int i = model.getRowCount() - 1; i > -1; i--) {
//                    model.removeRow(0);
//                }
//            }

//             String sql = "select * from allot_table where name = '"+jComboBox1.getSelectedItem().toString()+"' and p_type = '"+jComboBox2.getSelectedItem().toString()+"'";
            String sql = "select i.inv_name, concat(a.id_code,a.id_no) as id, a.alloted_date, a.unalloted_date, "
                    + "concat(u.user_f_name, \" \", u.user_l_name) as requested_by, "
                    + "concat(um.user_f_name, \" \", um.user_l_name) as alloted_to, a.comment "
                    + "from allot_table as a "
                    + "left join inventory_master as i "
                    + "on a.id_code = i.inv_code "
                    + "left join user_master as u "
                    + "on a.requested_by = u.emp_code "
                    + "left join user_master as um "
                    + "on a.allot_to = um.emp_code";
            if (cbProductName.getSelectedItem() != null && !cbProductName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbProductId.getSelectedItem() != null && !cbProductId.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(a.id_code,a.id_no) = '" + cbProductId.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbAllotedTo.getSelectedItem() != null && !cbAllotedTo.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(um.user_f_name, \" \", um.user_l_name) = '" + cbAllotedTo.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(um.user_f_name, \" \", um.user_l_name) = '" + cbAllotedTo.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbAllotment.getSelectedItem() != null && !cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("currently alloted")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and a.unalloted_date is null";
                    } else {
                        sql += " where a.unalloted_date is null";
                    }
                } else if (cbAllotment.getSelectedItem().toString().trim().equalsIgnoreCase("currently un-alloted")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and a.unalloted_date is not null";
                    } else {
                        sql += " where a.unalloted_date is not null";
                    }
                }
            }

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            try (CSVWriter writer = new CSVWriter(new FileWriter(selectedFile), ',', CSVWriter.NO_QUOTE_CHARACTER)) {
                writer.writeAll(rs, true);
                writer.close();
            }

            JOptionPane.showMessageDialog(this, "Alloted products data exported","Exported Alloted Product",JOptionPane.INFORMATION_MESSAGE);

        } catch (HeadlessException | IOException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(alot_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(alot_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(alot_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(alot_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new alot_search().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cbAllotedTo;
    private javax.swing.JComboBox<String> cbAllotment;
    private javax.swing.JComboBox<String> cbProductId;
    private javax.swing.JComboBox cbProductName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAlloted;
    private javax.swing.JLabel lblAllotment;
    private javax.swing.JLabel lblCountRecord;
    private javax.swing.JLabel lblProductId;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JTable tblAllotedProductsList;
    // End of variables declaration//GEN-END:variables
}
