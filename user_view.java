/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slproject;

import au.com.bytecode.opencsv.CSVWriter;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sLD20-Admin
 */
public class user_view extends javax.swing.JFrame {

    /**
     * Creates new form user_view
     */
    public user_view() {
        initComponents();
        show_table();

        if (Config.currentUserRole != null && Config.currentUserRole.trim().length() > 0 && Config.currentUserRole.trim().equalsIgnoreCase("admin")) {
            btnDelete.setEnabled(true);
        } else {
            btnDelete.setEnabled(false);
        }

        try {
            Image i = ImageIO.read(getClass().getResource("sls_logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setTitle(Config.PRODUCTTITLE + "_" + Config.VERSION + " - Users List (Current User : " + Config.currentUserFullName + ")");

        fillEmployeeCOdeCombo();
        fillFirstNameCombo();
        fillLastNameCombo();
        fetchOffice();
        tblUserView.setAutoCreateRowSorter(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserView = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbEmpCode = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbFirstName = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbLastName = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbUserRole = new javax.swing.JComboBox();
        btnHome = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExportData = new javax.swing.JButton();
        lblOfficeCode = new javax.swing.JLabel();
        cbOfficeCode = new javax.swing.JComboBox();
        lblCountRecord = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tblUserView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Eployee Code", "First Name", "Last Name", "Contact No.", "Office No.", "User Role", "Username"
            }
        ));
        jScrollPane1.setViewportView(tblUserView);

        jLabel1.setText("Employee Code");

        cbEmpCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbEmpCode.setToolTipText("Select employee code");

        jLabel2.setText("First Name");

        cbFirstName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbFirstName.setToolTipText("Select first name");

        jLabel3.setText("Last Name");

        cbLastName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbLastName.setToolTipText("Select last name");

        jLabel4.setText("User Role");

        cbUserRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Admin", "Manager", "Normal" }));
        cbUserRole.setToolTipText("Select user role");

        btnHome.setText("Home");
        btnHome.setToolTipText("Click to go to home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.setToolTipText("Click to view users list");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setToolTipText("Click to clear filters");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExportData.setText("Export Data");
        btnExportData.setToolTipText("Click to export users list");
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        lblOfficeCode.setText("Office No.");

        cbOfficeCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbOfficeCode.setToolTipText("Select office no.");

        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Click to delete users");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbEmpCode, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cbFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblOfficeCode)
                        .addGap(18, 18, 18)
                        .addComponent(cbOfficeCode, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(cbUserRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(btnHome)
                        .addGap(18, 18, 18)
                        .addComponent(btnView)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnExportData)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(lblCountRecord)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbEmpCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbUserRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOfficeCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOfficeCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHome)
                    .addComponent(btnView)
                    .addComponent(btnClear)
                    .addComponent(btnExportData)
                    .addComponent(lblCountRecord)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        btnHome.getAccessibleContext().setAccessibleDescription("");
        btnView.getAccessibleContext().setAccessibleDescription("");
        btnClear.getAccessibleContext().setAccessibleDescription("");
        btnExportData.getAccessibleContext().setAccessibleDescription("");
        btnDelete.getAccessibleContext().setAccessibleDescription("Click to ");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        try {

            DefaultTableModel model = (DefaultTableModel) tblUserView.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            if (model.getRowCount() > 0) {
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(0);
                }
            }
            String sql = "SELECT u.emp_code, u.user_f_name, u.user_l_name,"
                    + " u.user_contact, o.office_name, u.user_role, u.username FROM user_master "
                    + "as u left join office_master as o on u.office_code = o.office_code where u.active = 1";

            if (cbEmpCode.getSelectedItem() != null && !cbEmpCode.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.emp_code = '" + cbEmpCode.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.emp_code = '" + cbEmpCode.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbFirstName.getSelectedItem() != null && !cbFirstName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.user_f_name = '" + cbFirstName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.user_f_name = '" + cbFirstName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbLastName.getSelectedItem() != null && !cbLastName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.user_l_name = '" + cbLastName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.user_l_name = '" + cbLastName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbOfficeCode.getSelectedItem() != null && !cbOfficeCode.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and o.office_name = '" + cbOfficeCode.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where o.office_name = '" + cbOfficeCode.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbUserRole.getSelectedItem() != null && !cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Admin")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                } else if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Manager")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                } else if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Normal")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                }
            }
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String emp_code = rs.getString("emp_code");
                String user_f_name = rs.getString("user_f_name");
                String user_l_name = rs.getString("user_l_name");
                String user_contact = rs.getString("user_contact");
                String office_name = rs.getString("office_name");
                String user_role = rs.getString("user_role");
                String username = rs.getString("username");

                model.addRow(new Object[]{emp_code, user_f_name, user_l_name, user_contact, office_name, user_role, username});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        start_page start = new start_page();
        start.setVisible(true);
        dispose();

    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblUserView.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(0);
            }
        }

        cbEmpCode.setSelectedIndex(0);
        cbFirstName.setSelectedIndex(0);
        cbLastName.setSelectedIndex(0);
        cbOfficeCode.setSelectedIndex(0);
        cbUserRole.setSelectedIndex(0);

        show_table();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        // TODO add your handling code here:
        try {
            File selectedFile = null;
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("CSV", "csv"));
            int returnVal = fileDialog.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileDialog.getSelectedFile();
                System.out.println("selected file is" + selectedFile);

                if (selectedFile.getAbsolutePath().contains(".")) {
                    if (selectedFile.getAbsolutePath().endsWith(".csv")) {
                        exportCSV(selectedFile);
                    } else {
                        JOptionPane.showMessageDialog(this, "You can export CSV file only","CSV only",JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    selectedFile = new File(selectedFile.getAbsolutePath() + ".csv");
                    exportCSV(selectedFile);
                }
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnExportDataActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (tblUserView.getSelectedRows() != null && tblUserView.getSelectedRows().length > 0) {
                int selectedRows[] = tblUserView.getSelectedRows();
                for (int i = 0; i < selectedRows.length; i++) {
                    //JOptionPane.showMessageDialog(this, tblPurchasedProducts.getValueAt(selectedRows[i], 0) + " Is Alloted : " + tblPurchasedProducts.getValueAt(selectedRows[i], 10));
                    if (!isSomethingAllotedToUser(tblUserView.getValueAt(selectedRows[i], 0).toString())) {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
                        String sql = "update user_master set active = 0 "
                                + "where emp_code = '" + tblUserView.getValueAt(selectedRows[i], 0).toString().trim() + "'";
                        PreparedStatement stmt = con.prepareStatement(sql);
                        stmt.executeUpdate();
                        con.close();
                        JOptionPane.showMessageDialog(this, "User (" + tblUserView.getValueAt(selectedRows[i], 0).toString().trim() + ") deleted successfully","Deleted successfully",JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Some product(s) are alloted to user(" + tblUserView.getValueAt(selectedRows[i], 0).toString().trim() + ").\nSo can not delete it.","Can not delete",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }else {
                 JOptionPane.showMessageDialog(this, "Please select user(s) to delete", "Select user(s)" , JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Could not delete User(s)","Could not delete",JOptionPane.WARNING_MESSAGE);
        } finally {
            btnClear.doClick();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private boolean isSomethingAllotedToUser(String empCode) {
        boolean rv = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT count(*) as total FROM allot_table where lower(allot_to) = '" + empCode.toLowerCase() + "'";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                if (rs.getInt("total") > 0) {
                    rv = true;
                }
            }
            con.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return rv;
    }

    private void exportCSV(File selectedFile) {
        try {
            DefaultTableModel model = (DefaultTableModel) tblUserView.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
//            if (model.getRowCount() > 0) {
//                for (int i = model.getRowCount() - 1; i > -1; i--) {
//                    model.removeRow(0);
//                }
//            }

//             String sql = "select * from allot_table where name = '"+jComboBox1.getSelectedItem().toString()+"' and p_type = '"+jComboBox2.getSelectedItem().toString()+"'";
            String sql = "SELECT u.emp_code, u.user_f_name, u.user_l_name,"
                    + " u.user_contact, o.office_name, u.user_role, u.username FROM user_master "
                    + "as u left join office_master as o on u.office_code = o.office_code";

            if (cbEmpCode.getSelectedItem() != null && !cbEmpCode.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.emp_code = '" + cbEmpCode.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.emp_code = '" + cbEmpCode.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbFirstName.getSelectedItem() != null && !cbFirstName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.user_f_name = '" + cbFirstName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.user_f_name = '" + cbFirstName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbLastName.getSelectedItem() != null && !cbLastName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and u.user_l_name = '" + cbLastName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where u.user_l_name = '" + cbLastName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbOfficeCode.getSelectedItem() != null && !cbOfficeCode.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and o.office_name = '" + cbOfficeCode.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where o.office_name = '" + cbOfficeCode.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbUserRole.getSelectedItem() != null && !cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Admin")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                } else if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Manager")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                } else if (cbUserRole.getSelectedItem().toString().trim().equalsIgnoreCase("Normal")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    } else {
                        sql += " where u.user_role ='" + cbUserRole.getSelectedItem().toString().trim() + " '";
                    }
                }
            }

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            try (CSVWriter writer = new CSVWriter(new FileWriter(selectedFile), ',', CSVWriter.NO_QUOTE_CHARACTER)) {
                writer.writeAll(rs, true);
                writer.close();
            }

            JOptionPane.showMessageDialog(this, "Users data exported","Export",JOptionPane.INFORMATION_MESSAGE);

        } catch (HeadlessException | IOException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    private void show_table() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT u.emp_code, u.user_f_name, u.user_l_name,"
                    + " u.user_contact, o.office_name, u.user_role, u.username FROM user_master "
                    + "as u left join office_master as o on u.office_code = o.office_code where u.active = 1";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            tblUserView.removeAll();
            while (rs.next()) {
                String emp_code = rs.getString("emp_code");
                String user_f_name = rs.getString("user_f_name");
                String user_l_name = rs.getString("user_l_name");
                String user_contact = rs.getString("user_contact");
                String office_name = rs.getString("office_name");
                String user_role = rs.getString("user_role");
                String username = rs.getString("username");

                DefaultTableModel model = (DefaultTableModel) tblUserView.getModel();
                model.addRow(new Object[]{emp_code, user_f_name, user_l_name, user_contact, office_name, user_role, username});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    public void fillEmployeeCOdeCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT u.emp_code FROM user_master as u";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String emp_code = rs.getString("emp_code");
                cbEmpCode.addItem(emp_code);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    public void fillFirstNameCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT u.user_f_name FROM user_master as u";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String user_f_name = rs.getString("user_f_name");
                cbFirstName.addItem(user_f_name);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    public void fillLastNameCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT u.user_l_name FROM user_master as u";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String user_l_name = rs.getString("user_l_name");
                cbLastName.addItem(user_l_name);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    private void fetchOffice() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT office_name FROM office_master";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                String office_name = rs.getString("office_name");
                cbOfficeCode.addItem(office_name);
//                String inv_code = rs.getString("inv_code");
//                jComboBox2.addItem(inv_code);
            }

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(user_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(user_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(user_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(user_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new user_view().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cbEmpCode;
    private javax.swing.JComboBox cbFirstName;
    private javax.swing.JComboBox cbLastName;
    private javax.swing.JComboBox cbOfficeCode;
    private javax.swing.JComboBox cbUserRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCountRecord;
    private javax.swing.JLabel lblOfficeCode;
    private javax.swing.JTable tblUserView;
    // End of variables declaration//GEN-END:variables
}
