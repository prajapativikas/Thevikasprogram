package slproject;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To chan/*
 ge this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nimbus
 */
public class input_trial extends javax.swing.JFrame {

    /**
     * Creates new form input_trial
     */
    SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
    File selectedFile = null;
    File selectedBulkCSVFile = null;
    String currentImgPath;

    public input_trial() {
        initComponents();
        fill_combo();
        try {
            Image i = ImageIO.read(getClass().getResource("sls_logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setTitle(Config.PRODUCTTITLE + "_" + Config.VERSION + " - Purchase Product (Current User : " + Config.currentUserFullName + ")");

        jXDatePicker2.setFormats(formater);
        jXDatePicker2.getEditor().setEditable(false);

        //To set the upper bound (Blocking future dates)
        Calendar calendar = jXDatePicker2.getMonthView().getCalendar();
        calendar.setTime(new Date());
        jXDatePicker2.getMonthView().setUpperBound(calendar.getTime());

        //Hide Fileds
        hideShowMacAddressFields(false);
        hideShowRAMFields(false);
        hideShowIPAddressFields(false);
        hideShowProcessorFields(false);
        //Hide Fileds

        btnBulkSubmit.setEnabled(false);
    }

    private void hideShowRAMFields(boolean hideShow) {
        lblRAM.setEnabled(hideShow);
        txtRAM.setEnabled(hideShow);
    }

    private void hideShowProcessorFields(boolean hideShow) {
        lblProcessor.setEnabled(hideShow);
        txtProcessor.setEnabled(hideShow);
    }

    private void hideShowIPAddressFields(boolean hideShow) {
        lblIP.setEnabled(hideShow);
        txtIPAddress.setEnabled(hideShow);
    }

    private void hideShowMacAddressFields(boolean hideShow) {
        lblMacAddress.setEnabled(hideShow);
        txtMacAddress.setEnabled(hideShow);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<String>();
        jComboBox3 = new javax.swing.JComboBox<String>();
        jTextField10 = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        lblProductName = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblProcessor = new javax.swing.JLabel();
        lblProductVrand = new javax.swing.JLabel();
        lblModelNo = new javax.swing.JLabel();
        lblSerial = new javax.swing.JLabel();
        lblProductCost = new javax.swing.JLabel();
        lblComment = new javax.swing.JLabel();
        txtProcessor = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taComment = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        lblNo = new javax.swing.JLabel();
        labelCode = new javax.swing.JLabel();
        btnHome = new javax.swing.JButton();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        cbProductName = new javax.swing.JComboBox<String>();
        lblCode = new javax.swing.JLabel();
        btnSubmitandClear = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        btnSelectImg = new javax.swing.JButton();
        lblMacAddress = new javax.swing.JLabel();
        txtMacAddress = new javax.swing.JTextField();
        lblSelectedImg = new javax.swing.JLabel();
        txtIdNo = new javax.swing.JTextField();
        lblLastProductNumber = new javax.swing.JLabel();
        lblRAM = new javax.swing.JLabel();
        txtRAM = new javax.swing.JTextField();
        lblIP = new javax.swing.JLabel();
        txtIPAddress = new javax.swing.JTextField();
        lblBulkHeading = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSelectBulkCSV = new javax.swing.JButton();
        btnBulkSubmit = new javax.swing.JButton();
        lblSelectedCSVPath = new javax.swing.JLabel();
        btnCSVFields = new javax.swing.JButton();

        jButton2.setText("Show Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "select product code" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Purchase Product");
        setResizable(false);

        lblId.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblId.setText("ID:");

        lblProductName.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblProductName.setText("Product Name");

        lblDate.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblDate.setText("Date");

        lblProcessor.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblProcessor.setText("Processor");

        lblProductVrand.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblProductVrand.setText("Product Brand");

        lblModelNo.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblModelNo.setText("Model Number");

        lblSerial.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblSerial.setText("Serial Number");

        lblProductCost.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblProductCost.setText("Product Cost");

        lblComment.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        lblComment.setText("Comment");

        taComment.setColumns(20);
        taComment.setRows(5);
        taComment.setPreferredSize(new java.awt.Dimension(100, 80));
        jScrollPane1.setViewportView(taComment);

        btnSubmit.setText("Submit");
        btnSubmit.setToolTipText("Click to add product details");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lblNo.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblNo.setText("No.");

        labelCode.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        labelCode.setText(" Code");

        btnHome.setText("Home");
        btnHome.setToolTipText("Click to go to home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        jXDatePicker2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker2ActionPerformed(evt);
            }
        });

        cbProductName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "select name" }));
        cbProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProductNameActionPerformed(evt);
            }
        });

        btnSubmitandClear.setText("Submit and Clear");
        btnSubmitandClear.setToolTipText("Click to submit and clear product details");
        btnSubmitandClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitandClearActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setToolTipText("Click to clear details of product");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblImage.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblImage.setText("Image");

        btnSelectImg.setText("Select Image");
        btnSelectImg.setToolTipText("Select product image");
        btnSelectImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectImgActionPerformed(evt);
            }
        });

        lblMacAddress.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblMacAddress.setText("Mac Address");

        txtMacAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMacAddressActionPerformed(evt);
            }
        });

        lblSelectedImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSelectedImgMouseClicked(evt);
            }
        });

        txtIdNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdNoActionPerformed(evt);
            }
        });

        lblRAM.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblRAM.setText("RAM");

        txtRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRAMActionPerformed(evt);
            }
        });

        lblIP.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblIP.setText("IP Address");

        txtIPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPAddressActionPerformed(evt);
            }
        });

        lblBulkHeading.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBulkHeading.setText("Bulk Entry (From CSV)");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Select CSV File");

        btnSelectBulkCSV.setText("Select CSV");
        btnSelectBulkCSV.setToolTipText("Select CSV file for products");
        btnSelectBulkCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBulkCSVActionPerformed(evt);
            }
        });

        btnBulkSubmit.setText("Submit");
        btnBulkSubmit.setToolTipText("Add products from selected CSV file");
        btnBulkSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBulkSubmitActionPerformed(evt);
            }
        });

        btnCSVFields.setText("CSV Fields");
        btnCSVFields.setToolTipText("Fields required in CSV");
        btnCSVFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVFieldsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSelectedImg, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblProductName)
                                .addGap(18, 18, 18)
                                .addComponent(cbProductName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblProductVrand)
                                    .addComponent(lblProductCost)
                                    .addComponent(lblRAM)
                                    .addComponent(lblDate)
                                    .addComponent(lblImage))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSelectImg)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField8)
                                        .addComponent(jTextField5)
                                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtRAM)
                                        .addComponent(txtProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMacAddress)
                                    .addComponent(lblIP))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtMacAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                                    .addComponent(txtIPAddress)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblComment)
                                .addGap(44, 44, 44)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSubmit)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)
                                .addGap(18, 18, 18)
                                .addComponent(btnSubmitandClear)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblModelNo))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6)
                                    .addComponent(jTextField7)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(99, 99, 99)
                                            .addComponent(labelCode)
                                            .addGap(57, 57, 57))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblCode, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(38, 38, 38)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblNo)
                                        .addComponent(txtIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(lblId)))
                        .addGap(18, 18, 18)
                        .addComponent(lblLastProductNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblBulkHeading)
                .addGap(313, 313, 313))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblSelectedCSVPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelectBulkCSV)
                        .addGap(18, 18, 18)
                        .addComponent(btnBulkSubmit)))
                .addGap(18, 18, 18)
                .addComponent(btnCSVFields)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblIP)
                                    .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMacAddress)
                                    .addComponent(txtMacAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblProductVrand, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblProductCost, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRAM)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblComment)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSelectImg)
                                    .addComponent(lblImage))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSelectedImg, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnHome)
                                        .addComponent(btnSubmit)
                                        .addComponent(btnClear)
                                        .addComponent(btnSubmitandClear)))))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblId))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelCode)
                                    .addComponent(lblNo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtIdNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLastProductNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(lblBulkHeading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnSelectBulkCSV)
                    .addComponent(btnBulkSubmit)
                    .addComponent(btnCSVFields))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSelectedCSVPath, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        submitProduct(false);
//        try {
//
//            Class.forName("com.mysql.jdbc.Driver");
//
//            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
//            Statement st = con.createStatement();
//            String Name = jComboBox1.getSelectedItem().toString();
//            int Id_No = Integer.parseInt(jTextField10.getText().trim());
//            String Id_Code = jLabel11.getText();
//
//            //String Date = jTextField3.getText();
//            String strDate = formater.format(jXDatePicker2.getDate());
////Date date = jXDatePicker2.getDate();
//            String P_type = jTextField4.getText();
//            String p_brand = jTextField5.getText();
//            String Model_No = jTextField6.getText();
//            String Serial_No = jTextField7.getText();
//            String P_cost = jTextField8.getText();
//            String Request = jTextField11.getText();
//            String Allot_to = jTextField9.getText();
//            String comment = jTextArea1.getText();
//            comment.trim();
//
//            String query = "insert into purchase_table values (" + Id_No + ",'" + Id_Code + "','" + Name + "','" + strDate + "','" + P_type + "','" + p_brand + "','" + Model_No + "','" + Serial_No + "','" + P_cost + "','" + Request + "','" + Allot_to + "','" + comment + "',0,0,0)";
//            System.out.println("query : " + query);
//
//            st.executeUpdate(query);
////            String s = jTextField1.getText();
////            int number = Integer.valueOf(s);
////            s = Integer.toString(++number);
////            jTextField1.setText(s);
//
//            JOptionPane.showMessageDialog(this, "Data Saved Succesfully");
//          //  clearFields();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, e.getMessage());
//        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private boolean isIdExist(String code, int no) {
        boolean rv = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select count(*) as total FROM purchase_table where id_code = '" + code + "' and id_no = " + no;

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int counter = rs.getInt("total");
                if (counter > 0) {
                    rv = true;
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            //JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return rv;
    }

    private void fill_combo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "SELECT inv_name FROM inventory_master";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                String inv_name = rs.getString("inv_name");
                cbProductName.addItem(inv_name);

            }

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Excetion",JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Show_input show = new Show_input();
        show.setVisible(true);
        dispose();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        start_page start = new start_page();
        start.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void cbProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProductNameActionPerformed
        try {
            clearFields(false);

            lblCode.setText("");
            String prName = cbProductName.getSelectedItem().toString();
            Class.forName("com.mysql.jdbc.Driver");
            String sql;
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            sql = "SELECT inv_code FROM inventory_master where inv_name='" + prName + "'";

            //     sql = "SELECT max(id_no) as id_no FROM purchase_table where name = '" + prName + "'  ";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

//                String inv_name = rs.getString("inv_name");
//                jComboBox1.addItem(inv_name);
                String inv_code = rs.getString("inv_code");
                lblCode.setText(inv_code);

                if (inv_code.toLowerCase().equalsIgnoreCase("sld")
                        || inv_code.toLowerCase().equalsIgnoreCase("sll")
                        || inv_code.toLowerCase().equalsIgnoreCase("slpr")
                        || inv_code.toLowerCase().equalsIgnoreCase("sltb")
                        || inv_code.toLowerCase().equalsIgnoreCase("slrt")) {
                    hideShowMacAddressFields(true);
                    hideShowIPAddressFields(true);
                    hideShowRAMFields(true);
                    hideShowProcessorFields(true);
                } else {
                    hideShowMacAddressFields(false);
                    hideShowIPAddressFields(false);
                    hideShowRAMFields(false);
                    hideShowProcessorFields(false);
                }
            }

            sql = "SELECT max(id_no) as id_no FROM purchase_table where name = '" + prName + "'";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            lblLastProductNumber.setText("");
            while (rs.next()) {
                if (rs.getString("id_no") != null && rs.getString("id_no").trim().length() > 0) {
                    lblLastProductNumber.setText("(Last Id : " + rs.getString("id_no").trim() + ")");
                } else {
                    lblLastProductNumber.setText("(Last Id : 0)");
                }
            }
            con.close();

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cbProductNameActionPerformed

    private void btnSubmitandClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitandClearActionPerformed
        // TODO add your handling code here:
        submitProduct(true);
    }//GEN-LAST:event_btnSubmitandClearActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearFields(true);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSelectImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectImgActionPerformed
        try {
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "jpeg", "bmp"));
            int returnVal = fileDialog.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileDialog.getSelectedFile();
                //JOptionPane.showMessageDialog(this, "You selected file : " + selectedFile.getAbsolutePath());
                currentImgPath = selectedFile.getAbsolutePath();
                BufferedImage img = ImageIO.read(selectedFile);
//                Image scimg = img.getScaledInstance(lblImage.getWidth(),
//                        lblImage.getHeight(), 4);
                Image scimg = img.getScaledInstance(250, 100, 4);
                ImageIcon imageIcon = new ImageIcon(scimg);

                lblSelectedImg.setIcon(imageIcon);
            } else {
                //JOptionPane.showMessageDialog(this, "You cancelled image selection.");
            }
        } catch (HeadlessException | IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSelectImgActionPerformed

    private void txtMacAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMacAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMacAddressActionPerformed

    private void txtRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRAMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRAMActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void txtIPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPAddressActionPerformed

    private void jXDatePicker2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXDatePicker2ActionPerformed

    private void txtIdNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdNoActionPerformed

    private void btnSelectBulkCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBulkCSVActionPerformed
        try {
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("CSV", "csv"));
            int returnVal = fileDialog.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedBulkCSVFile = fileDialog.getSelectedFile();
                lblSelectedCSVPath.setText("Selected CSV File : " + selectedBulkCSVFile.getAbsolutePath());
                btnBulkSubmit.setEnabled(true);
            } else {
                //JOptionPane.showMessageDialog(this, "You cancelled image selection.");
                selectedBulkCSVFile = null;
                btnBulkSubmit.setEnabled(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSelectBulkCSVActionPerformed

    private void btnBulkSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBulkSubmitActionPerformed
        Connection con = null;
        try {
            if (selectedBulkCSVFile != null && selectedBulkCSVFile.exists()) {
                Class.forName("com.mysql.jdbc.Driver");

                con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
                Statement st = con.createStatement();
                int recordsInserted = 0;

                String path = selectedBulkCSVFile.getAbsolutePath();
                path = path.replaceAll(Matcher.quoteReplacement("\\"), Matcher.quoteReplacement("\\\\"));
                String query = "LOAD DATA LOCAL infile '" + path + "' "
                        + "INTO TABLE purchase_table "
                        + "fields terminated BY \",\" "
                        + "lines terminated BY \"\\n\" "
                        + "(" + Config.BULKPRODUCTSFIELDS + ")";
                recordsInserted = st.executeUpdate(query);

                con.close();
                JOptionPane.showMessageDialog(this, recordsInserted + " records inserted.","Records inserted",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ClassNotFoundException | SQLException | HeadlessException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Some problem in inserting bulk records.\n\n"
                    + "Possible Reasons:\n"
                    + "1. CSV format might be wrong\n"
                    + "2. Records might be already exist","Exception",JOptionPane.ERROR_MESSAGE);
        } finally {
            selectedBulkCSVFile = null;
            lblSelectedCSVPath.setText(null);
            btnBulkSubmit.setEnabled(false);
            try {
                con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnBulkSubmitActionPerformed

    private void btnCSVFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVFieldsActionPerformed
        JOptionPane.showMessageDialog(this, "Fields required to insert products in bulk;\n\n"
                + Config.BULKPRODUCTSFIELDS,"Required fields for bulk entry",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnCSVFieldsActionPerformed

    private void lblSelectedImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSelectedImgMouseClicked
               
        Config.IMGPATH = currentImgPath;
        
        ProductImage pi = new ProductImage();
        pi.setVisible(true);
    }//GEN-LAST:event_lblSelectedImgMouseClicked
    public void clearFields(boolean prodName) {
        lblCode.setText("");
        txtProcessor.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        taComment.setText("");
        txtIdNo.setText("");
        if (prodName) {
            cbProductName.setSelectedIndex(0);
        }
        jXDatePicker2.setDate(null);
        selectedFile = null;
        lblSelectedImg.setIcon(null);
        txtMacAddress.setText("");
        txtRAM.setText("");
        txtIPAddress.setText("");
        hideShowIPAddressFields(false);
        hideShowRAMFields(false);
        hideShowProcessorFields(false);
        hideShowMacAddressFields(false);
    }

    public void submitProduct(boolean clear) {
        try {
            if (cbProductName.getSelectedItem() != cbProductName.getItemAt(0)) {
                if (txtIdNo.getText() != null && txtIdNo.getText().trim().length() > 0) {
                    boolean isInt = false;
                    try {
                        int idNo = Integer.parseInt(txtIdNo.getText().trim());
                        isInt = true;
                    } catch (Exception e) {
                    }
                    if (isInt) {
                        if (jXDatePicker2.getDate() != null) {

                            if (jTextField5.getText() != null && jTextField5.getText().trim().length() > 0) {
                                if (jTextField6.getText() != null && jTextField6.getText().trim().length() > 0) {
                                    if (jTextField7.getText() != null && jTextField7.getText().trim().length() > 0) {
                                        if (jTextField8.getText() != null && jTextField8.getText().trim().length() > 0) {

                                            boolean ProcessorOk = true;
                                            if (txtProcessor.isEnabled()) {
                                                if (txtProcessor.getText() != null && txtProcessor.getText().trim().length() > 0) {
                                                    ProcessorOk = true;
                                                } else {
                                                    ProcessorOk = false;
                                                }
                                            }

                                            boolean RAMOk = true;
                                            if (txtRAM.isEnabled()) {
                                                if (txtRAM.getText() != null && txtRAM.getText().trim().length() > 0) {
                                                    RAMOk = true;
                                                } else {
                                                    RAMOk = false;
                                                }
                                            }

                                            boolean ipOK = true;
                                            if (txtIPAddress.isEnabled()) {
                                                if (txtIPAddress.getText() != null && txtIPAddress.getText().trim().length() > 0) {
                                                    ipOK = true;
                                                } else {
                                                    ipOK = false;
                                                }
                                            }
                                            boolean macOK = true;
                                            if (txtMacAddress.isEnabled()) {
                                                if (txtMacAddress.getText() != null && txtMacAddress.getText().trim().length() > 0) {
                                                    macOK = true;
                                                } else {
                                                    macOK = false;
                                                }
                                            }
                                            if (ProcessorOk) {
                                                if (RAMOk) {
                                                    if (ipOK) {

                                                        if (macOK) {
                                                            if (!isIdExist(lblCode.getText().trim(),
                                                                    Integer.parseInt(txtIdNo.getText().trim()))) {
                                                                Class.forName("com.mysql.jdbc.Driver");

                                                                Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
                                                                Statement st = con.createStatement();
                                                                String Name = cbProductName.getSelectedItem().toString();
                                                                int Id_No = Integer.parseInt(txtIdNo.getText().trim());
                                                                String Id_Code = lblCode.getText();

                                                                //String Date = jTextField3.getText();
                                                                String strDate = formater.format(jXDatePicker2.getDate());
                                                                //Date date = jXDatePicker2.getDate();
                                                                String processor = txtProcessor.getText();
                                                                String p_brand = jTextField5.getText();
                                                                String Model_No = jTextField6.getText();
                                                                String Serial_No = jTextField7.getText();
                                                                String P_cost = jTextField8.getText();
                                                                String ram = txtRAM.getText();
                                                                String ip_address = txtIPAddress.getText();
                                                                String comment = taComment.getText();
                                                                comment = comment.trim();

                                                                FileInputStream fis = null;
                                                                if (selectedFile != null) {
                                                                    fis = new FileInputStream(selectedFile);
                                                                }

                                                                String query = "insert into purchase_table(id_no,id_code,name,date,processor,p_brand,model_no,serial_no,p_cost,ram,ip_address,comment,status,sell,break,image,mac_address,active) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                                                System.out.println("query : " + query);
                                                                PreparedStatement pre = con.prepareStatement(query);
                                                                pre.setInt(1, Id_No);
                                                                pre.setString(2, Id_Code);
                                                                pre.setString(3, Name);
                                                                pre.setString(4, strDate);
                                                                pre.setString(5, processor);
                                                                pre.setString(6, p_brand);
                                                                pre.setString(7, Model_No);
                                                                pre.setString(8, Serial_No);
                                                                pre.setString(9, P_cost);
                                                                pre.setString(10, ram);
                                                                pre.setString(11, ip_address);
                                                                pre.setString(12, comment);
                                                                pre.setInt(13, 0);
                                                                pre.setInt(14, 0);
                                                                pre.setInt(15, 0);
                                                                if (selectedFile != null) {
                                                                    pre.setBinaryStream(16, (InputStream) fis, (int) selectedFile.length());
                                                                } else {
                                                                    pre.setBinaryStream(16, null, 0);
                                                                }
                                                                if (txtMacAddress.getText() != null && txtMacAddress.getText().trim().length() > 0) {
                                                                    pre.setString(17, txtMacAddress.getText().trim());
                                                                } else {
                                                                    pre.setString(17, "");
                                                                }
                                                                pre.setInt(18, 1);
                                                                pre.executeUpdate();
                                                                //st.executeUpdate(query);

                                                                //Get Last ID No.
                                                                query = "SELECT max(id_no) as id_no FROM purchase_table where name = '" + Name + "'";
                                                                pre = con.prepareStatement(query);
                                                                ResultSet rs = pre.executeQuery();

                                                                lblLastProductNumber.setText("");
                                                                while (rs.next()) {
                                                                    if (rs.getString("id_no") != null && rs.getString("id_no").trim().length() > 0) {
                                                                        lblLastProductNumber.setText("(Last Id : " + rs.getString("id_no").trim() + ")");
                                                                    } else {
                                                                        lblLastProductNumber.setText("(Last Id : 0)");
                                                                    }
                                                                }

                                                                pre.close();
                                                                con.close();
                                                                JOptionPane.showMessageDialog(this, "Data Saved Succesfully","Data saved",JOptionPane.INFORMATION_MESSAGE);

                                                                if (clear) {
                                                                    clearFields(true);
                                                                }
                                                            } else {
                                                                JOptionPane.showMessageDialog(this, "ID already exist.\nPlease enter different ID.","Enter different id",JOptionPane.WARNING_MESSAGE);
                                                                txtIdNo.requestFocus();
                                                            }
                                                        } else {
                                                            JOptionPane.showMessageDialog(this, "Please enter mac address","Enter MAC address",JOptionPane.WARNING_MESSAGE);
                                                            txtMacAddress.requestFocus();
                                                        }
                                                    } else {
                                                        JOptionPane.showMessageDialog(this, "Please enter ip address","Enter IP address",JOptionPane.WARNING_MESSAGE);
                                                        txtIPAddress.requestFocus();
                                                    }
                                                } else {
                                                    JOptionPane.showMessageDialog(this, "Please enter RAM","Enter RAM",JOptionPane.WARNING_MESSAGE);
                                                    txtRAM.requestFocus();

                                                }
                                            } else {
                                                JOptionPane.showMessageDialog(this, "Please enter processor","Enter processor",JOptionPane.WARNING_MESSAGE);
                                                txtProcessor.requestFocus();

                                            }

                                        } else {
                                            JOptionPane.showMessageDialog(this, "Please enter product cost","Enter product cost",JOptionPane.WARNING_MESSAGE);
                                            jTextField8.requestFocus();

                                        }

                                    } else {
                                        JOptionPane.showMessageDialog(this, "Please enter serial number","Enter serial number",JOptionPane.WARNING_MESSAGE);
                                        jTextField7.requestFocus();

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Please enter model number","Enter model number",JOptionPane.WARNING_MESSAGE);
                                    jTextField6.requestFocus();

                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Please enter product brand","Enter product brand",JOptionPane.WARNING_MESSAGE);
                                jTextField5.requestFocus();
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select date","Select date",JOptionPane.WARNING_MESSAGE);
                            jXDatePicker2.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter numbers only in id number","Enter numbers only in id",JOptionPane.WARNING_MESSAGE);
                        txtIdNo.setText("");
                        txtIdNo.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter product id number","Enter product ID",JOptionPane.WARNING_MESSAGE);
                    txtIdNo.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select product name","Enter product name",JOptionPane.WARNING_MESSAGE);
                cbProductName.requestFocus();
            }

//            Class.forName("com.mysql.jdbc.Driver");
//
//            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
//            Statement st = con.createStatement();
//            String Name = jComboBox1.getSelectedItem().toString();
//            int Id_No = Integer.parseInt(jTextField10.getText().trim());
//            String Id_Code = jLabel11.getText();
//
//            //String Date = jTextField3.getText();
//            String strDate = formater.format(jXDatePicker2.getDate());
////Date date = jXDatePicker2.getDate();
//            String P_type = jTextField4.getText();
//            String p_brand = jTextField5.getText();
//            String Model_No = jTextField6.getText();
//            String Serial_No = jTextField7.getText();
//            String P_cost = jTextField8.getText();
//            String Request = jTextField11.getText();
//            String Allot_to = jTextField9.getText();
//            String comment = jTextArea1.getText();
//            comment.trim();
//
//            
//            String query = "insert into purchase_table values (" + Id_No + ",'" + Id_Code + "','" + Name + "','" + strDate + "','" + P_type + "','" + p_brand + "','" + Model_No + "','" + Serial_No + "','" + P_cost + "','" + Request + "','" + Allot_to + "','" + comment + "',0,0,0)";
//            System.out.println("query : " + query);
//
//            st.executeUpdate(query);
////            String s = jTextField1.getText();
////            int number = Integer.valueOf(s);
////            s = Integer.toString(++number);
////            jTextField1.setText(s);
//
//            JOptionPane.showMessageDialog(this, "Data Saved Succesfully");
//          //  clearFields();
        } catch (ClassNotFoundException | SQLException | NumberFormatException | FileNotFoundException | HeadlessException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(input_trial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new input_trial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBulkSubmit;
    private javax.swing.JButton btnCSVFields;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnSelectBulkCSV;
    private javax.swing.JButton btnSelectImg;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnSubmitandClear;
    private javax.swing.JComboBox<String> cbProductName;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private javax.swing.JLabel labelCode;
    private javax.swing.JLabel lblBulkHeading;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblComment;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLastProductNumber;
    private javax.swing.JLabel lblMacAddress;
    private javax.swing.JLabel lblModelNo;
    private javax.swing.JLabel lblNo;
    private javax.swing.JLabel lblProcessor;
    private javax.swing.JLabel lblProductCost;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblProductVrand;
    private javax.swing.JLabel lblRAM;
    private javax.swing.JLabel lblSelectedCSVPath;
    private javax.swing.JLabel lblSelectedImg;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JTextArea taComment;
    private javax.swing.JTextField txtIPAddress;
    private javax.swing.JTextField txtIdNo;
    private javax.swing.JTextField txtMacAddress;
    private javax.swing.JTextField txtProcessor;
    private javax.swing.JTextField txtRAM;
    // End of variables declaration//GEN-END:variables
}
