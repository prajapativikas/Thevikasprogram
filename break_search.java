/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slproject;

import au.com.bytecode.opencsv.CSVWriter;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sLD20-Admin
 */
public class break_search extends javax.swing.JFrame {

    /**
     * Creates new form break_search
     */
    public break_search() {
        initComponents();

        try {
            Image i = ImageIO.read(getClass().getResource("sls_logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setTitle(Config.PRODUCTTITLE + "_" + Config.VERSION + " - Breakdown Products List (Current User : " + Config.currentUserFullName + ")");
        show_table();
        fillProductNameCombo();
        fillProductIDCombo();
        tblAllotedProductsList.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllotedProductsList = new javax.swing.JTable();
        lblProductName = new javax.swing.JLabel();
        cbProductName = new javax.swing.JComboBox();
        lblProductId = new javax.swing.JLabel();
        cbID = new javax.swing.JComboBox();
        lblStatus = new javax.swing.JLabel();
        cbBreakdown = new javax.swing.JComboBox();
        btnHome = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExportData = new javax.swing.JButton();
        lblCountRecord = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tblAllotedProductsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "ID", "BreakdownDate", "Repaired Date", "Comment"
            }
        ));
        tblAllotedProductsList.setEnabled(false);
        jScrollPane1.setViewportView(tblAllotedProductsList);

        lblProductName.setText("Product Name");

        cbProductName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbProductName.setToolTipText("Select product name");
        cbProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProductNameActionPerformed(evt);
            }
        });

        lblProductId.setText("Product ID");

        cbID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cbID.setToolTipText("Select product id ");
        cbID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIDActionPerformed(evt);
            }
        });

        lblStatus.setText("Status");

        cbBreakdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Currently Breakdown", "Repaired" }));
        cbBreakdown.setToolTipText("Select status");
        cbBreakdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBreakdownActionPerformed(evt);
            }
        });

        btnHome.setText("Home");
        btnHome.setToolTipText("Click to go to home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.setToolTipText("Click to view break products");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setToolTipText("Click to clear filters");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExportData.setText("Export Data");
        btnExportData.setToolTipText("Click to export products");
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblProductName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblProductId)
                        .addGap(18, 18, 18)
                        .addComponent(cbID, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBreakdown, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnHome)
                        .addGap(8, 8, 8)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCountRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductName)
                    .addComponent(cbProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProductId)
                    .addComponent(cbID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus)
                    .addComponent(cbBreakdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCountRecord, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnHome)
                        .addComponent(btnView)
                        .addComponent(btnClear)
                        .addComponent(btnExportData)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnHome.getAccessibleContext().setAccessibleDescription("");
        btnView.getAccessibleContext().setAccessibleDescription("");
        btnClear.getAccessibleContext().setAccessibleDescription("");
        btnExportData.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbBreakdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBreakdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBreakdownActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        try {

            DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            if (model.getRowCount() > 0) {
                for (int i = model.getRowCount() - 1; i > -1; i--) {
                    model.removeRow(0);
                }
            }

            String sql = "select i.inv_name, concat(b.id_code,b.id_no) as id, b.breakdown_date, "
                    + "b.repair_date,b.comment from breakdown_repair as b "
                    + "left join inventory_master as i "
                    + "on b.id_code = i.inv_code";

            if (cbProductName.getSelectedItem() != null && !cbProductName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbID.getSelectedItem() != null && !cbID.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(b.id_code,b.id_no) = '" + cbID.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(b.id_code,b.id_no) = '" + cbID.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbBreakdown.getSelectedItem() != null && !cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("currently breakdown")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and b.repair_date is null";
                    } else {
                        sql += " where b.repair_date is null";
                    }
                } else if (cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("Repaired")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and b.repair_date is not null";
                    } else {
                        sql += " where b.repair_date is not null";
                    }
                }
            }
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String name = rs.getString("inv_name");
                String id = rs.getString("id");
                String breakdown_date = rs.getString("breakdown_date");
                String repair_date = rs.getString("repair_date");
                String comment = rs.getString("comment");

                model.addRow(new Object[]{name, id, breakdown_date, repair_date, comment});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here                                      
        // TODO add your handling code here:
        start_page start = new start_page();
        start.setVisible(true);
        dispose();

    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(0);
            }
        }

        cbProductName.setSelectedIndex(0);
        cbID.setSelectedIndex(0);
        cbBreakdown.setSelectedIndex(0);

        show_table();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        // TODO add your handling code here:
        try {
            File selectedFile = null;
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("CSV", "csv"));
            int returnVal = fileDialog.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileDialog.getSelectedFile();
                System.out.println("selected file is" + selectedFile);

                if (selectedFile.getAbsolutePath().contains(".")) {
                    if (selectedFile.getAbsolutePath().endsWith(".csv")) {
                        exportCSV(selectedFile);
                    } else {
                        JOptionPane.showMessageDialog(this, "You can export CSV file only","CSV only",JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    selectedFile = new File(selectedFile.getAbsolutePath() + ".csv");
                    exportCSV(selectedFile);
                }
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportDataActionPerformed

    private void cbProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProductNameActionPerformed
        // TODO add your handling code here:
        try {
            // clearFields(false);
            System.out.println(cbProductName.getSelectedItem());
            if (cbProductName.getSelectedItem() != null) {
                fetchProductIds(cbProductName.getSelectedItem().toString().trim());
            }

            String prName = cbProductName.getSelectedItem().toString();

            Class.forName("com.mysql.jdbc.Driver");
            String sql;
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            sql = "SELECT distinct concat(b.id_code,b.id_no) as id FROM breakdown_repair as b left join inventory_master as i on b.id_code = i.inv_code where i.inv_name='" + prName + "'";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

//                String inv_name = rs.getString("inv_name");
//                jComboBox1.addItem(inv_name);
                String ID = rs.getString("id");

            }
        } catch (Exception e) {
        }
    }

    private void fetchProductIds(String product_name) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String id = "";

            if (product_name.toString().equalsIgnoreCase("All")) {

                cbID.removeAllItems();
                cbID.addItem("All");
                fillProductIDCombo();
            } else {

                id = "select distinct concat(b.id_code,b.id_no) as id FROM breakdown_repair as b left join inventory_master as i on b.id_code = i.inv_code where i.inv_name = '" + product_name.trim() + "' ";
                PreparedStatement ps = con.prepareStatement(id);
                ResultSet rs = ps.executeQuery();

                cbID.removeAllItems();
                cbID.addItem("All");
                while (rs.next()) {
                    String ID = rs.getString("id");
                    cbID.addItem(ID);

                }
            }
            //  System.out.println("product_name" + product_name);

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("[fetch_data] Problem : " + e.getMessage());
        }

    }//GEN-LAST:event_cbProductNameActionPerformed

    private void cbIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbIDActionPerformed
    private void exportCSV(File selectedFile) {
        try {
            DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
//            if (model.getRowCount() > 0) {
//                for (int i = model.getRowCount() - 1; i > -1; i--) {
//                    model.removeRow(0);
//                }
//            }

//             String sql = "select * from allot_table where name = '"+jComboBox1.getSelectedItem().toString()+"' and p_type = '"+jComboBox2.getSelectedItem().toString()+"'";
            String sql = "select i.inv_name, concat(b.id_code,b.id_no) as id, b.breakdown_date, "
                    + "b.repair_date,b.comment from breakdown_repair as b "
                    + "left join inventory_master as i "
                    + "on b.id_code = i.inv_code";

            if (cbProductName.getSelectedItem() != null && !cbProductName.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where i.inv_name = '" + cbProductName.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbID.getSelectedItem() != null && !cbID.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (sql.toLowerCase().contains("where")) {
                    sql += " and concat(b.id_code,b.id_no) = '" + cbID.getSelectedItem().toString().trim() + "'";
                } else {
                    sql += " where concat(b.id_code,b.id_no) = '" + cbID.getSelectedItem().toString().trim() + "'";
                }
            }

            if (cbBreakdown.getSelectedItem() != null && !cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("all")) {
                if (cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("currently breakdown")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and b.repair_date is null";
                    } else {
                        sql += " where b.repair_date is null";
                    }
                } else if (cbBreakdown.getSelectedItem().toString().trim().equalsIgnoreCase("repaired")) {
                    if (sql.toLowerCase().contains("where")) {
                        sql += " and b.repair_date is not null";
                    } else {
                        sql += " where b.repair_date is not null";
                    }
                }
            }

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            try (CSVWriter writer = new CSVWriter(new FileWriter(selectedFile), ',', CSVWriter.NO_QUOTE_CHARACTER)) {
                writer.writeAll(rs, true);
                writer.close();
            }

            JOptionPane.showMessageDialog(this, "Breakdown products data exported","Exported breakdown product list",JOptionPane.INFORMATION_MESSAGE);

        } catch (HeadlessException | IOException | ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    private void show_table() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select i.inv_name, concat(b.id_code,b.id_no) as id, b.breakdown_date, "
                    + "b.repair_date,b.comment from breakdown_repair as b "
                    + "left join inventory_master as i "
                    + "on b.id_code = i.inv_code";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String name = rs.getString("inv_name");
                String id = rs.getString("id");
                String breakdown_date = rs.getString("breakdown_date");
                String repair_date = rs.getString("repair_date");
                String comment = rs.getString("comment");

                DefaultTableModel model = (DefaultTableModel) tblAllotedProductsList.getModel();
                model.addRow(new Object[]{name, id, breakdown_date, repair_date, comment});
                i++;
            }
            lblCountRecord.setText("Records Count : " + i);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),"Exception",JOptionPane.ERROR_MESSAGE);
        }
    }

    public void fillProductNameCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select distinct i.inv_name from breakdown_repair as b "
                    + "left join inventory_master as i "
                    + "on b.id_code = i.inv_code;";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String name = rs.getString("inv_name");
                cbProductName.addItem(name);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    /**
     *
     */
    public void fillProductIDCombo() //FETCH VALUE IN COMBOBOX
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);
            String sql = "select distinct concat(id_code, id_no) as id from breakdown_repair";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String id = rs.getString("id");
                cbID.addItem(id);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.getMessage();
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(break_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(break_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(break_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(break_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new break_search().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cbBreakdown;
    private javax.swing.JComboBox cbID;
    private javax.swing.JComboBox cbProductName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCountRecord;
    private javax.swing.JLabel lblProductId;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblAllotedProductsList;
    // End of variables declaration//GEN-END:variables
}
